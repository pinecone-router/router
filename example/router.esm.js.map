{
  "version": 3,
  "sources": ["../src/route.ts", "../src/history.ts", "../src/settings.ts", "../src/handler.ts", "../src/context.ts", "../src/errors.ts", "../src/utils.ts", "../src/templates.ts", "../src/router.ts", "../src/directives/x-template.ts", "../src/directives/x-handler.ts", "../src/directives/x-route.ts", "../src/links.ts", "../src/index.ts"],
  "sourcesContent": [
    "import type { Handler } from './handler'\nexport interface Route {\n\t/**\n\t * Set to true automatically when creating a route programmatically.\n\t */\n\treadonly programmaticTemplates: boolean\n\t/**\n\t * The regex pattern used to match route params, if any.\n\t */\n\treadonly pattern?: RegExp\n\t/**\n\t * The target ID for the route templates\n\t */\n\treadonly targetID?: string\n\t/**\n\t * The raw route path\n\t */\n\treadonly path: string\n\n\thandlers: Handler[]\n\ttemplates: string[]\n}\n\nexport interface RouteOptions {\n\ttargetID?: string\n\thandlers?: Handler[]\n\ttemplates?: string[]\n\tpreload?: boolean\n}\n\n/**\n * Creates a new Route object\n * @param {string} path - route path pattern\n * @param {RouteOptions} options - route configuration options\n * @returns {Route} - a route object\n */\nexport default function createRoute(\n\tpath: string,\n\t{ targetID, templates = [], handlers = [] }: RouteOptions = {}\n\t// ignoreTrailingSlash: boolean = true\n): Route {\n\t// Create the route object\n\tconst route: Route = {\n\t\tprogrammaticTemplates: templates.length > 0,\n\t\ttargetID,\n\t\ttemplates,\n\t\thandlers,\n\t\tpath,\n\t\t/**\n\t\t * Check whether a path matches against this route\n\t\t * @param {string} path path to match against\n\t\t * @returns {undefined | Context['params']}  returns undefined if no match,\n\t\t *          otherwise returns the route params\n\t\t */\n\t}\n\n\treturn route\n}\ntype RouteArgs =\n\t| undefined\n\t| {\n\t\t\t[key: string]: string\n\t  }\n\n// https://github.com/amio/my-way\nexport function match(pattern: string, path: string): RouteArgs {\n\tconst args: Record<string, string> = {}\n\n\t// Pre-compile regexes once\n\tconst patternRegex = /\\/(:)?([\\w-]+)([*?+])?(?:<([^>]+)>)?/g\n\tconst pathRegex = /\\/([^/]+)/g\n\n\tlet patternMatch = patternRegex.exec(pattern)\n\tlet pathMatch = pathRegex.exec(path)\n\n\twhile (patternMatch !== null) {\n\t\tconst [fullPattern, isParam, name, flag, constraint] = patternMatch\n\n\t\t// No path segment to match against\n\t\tif (pathMatch === null) {\n\t\t\treturn flag === '?' || flag === '*' ? args : undefined\n\t\t}\n\n\t\t// Handle rest parameters (+ and *)\n\t\tif (flag === '+' || flag === '*') {\n\t\t\tconst rest = safeDecodeURIComponent(path.slice(pathMatch.index + 1))\n\t\t\tif (constraint && !new RegExp(`^${constraint}$`).test(rest))\n\t\t\t\treturn undefined\n\t\t\targs[name] = rest\n\t\t\treturn args\n\t\t}\n\n\t\tconst [fullPath, value] = pathMatch\n\n\t\t// Literal segment must match exactly\n\t\tif (!isParam && fullPattern !== fullPath) return undefined\n\n\t\t// Named parameter with optional constraint\n\t\tif (isParam) {\n\t\t\tif (constraint && !new RegExp(`^${constraint}$`).test(value))\n\t\t\t\treturn undefined\n\t\t\targs[name] = safeDecodeURIComponent(value)\n\t\t}\n\n\t\tpatternMatch = patternRegex.exec(pattern)\n\t\tpathMatch = pathRegex.exec(path)\n\t}\n\n\t// Make sure we've consumed the entire path\n\treturn pathMatch === null ? args : undefined\n}\n\nfunction safeDecodeURIComponent(uri: string): string {\n\ttry {\n\t\treturn decodeURIComponent(uri)\n\t} catch {\n\t\treturn uri\n\t}\n}\n",
    "import { type PineconeRouter } from './router'\n\nexport interface NavigationHistory {\n\t/**\n\t * The current history index\n\t */\n\tindex: number\n\n\t/**\n\t * The list of history entries\n\t */\n\tentries: string[]\n\n\t/**\n\t * Check if the router can navigate backward\n\t * @returns {boolean} true if the router can go back\n\t */\n\tcanGoBack: () => boolean\n\n\t/**\n\t * Go back to the previous route in the navigation history\n\t */\n\tback: () => void\n\n\t/**\n\t * Check if the router can navigate forward\n\t *\n\t * @returns {boolean} true if the router can go forward\n\t */\n\tcanGoForward: () => boolean\n\n\t/**\n\t * Go to the next route in the navigation history\n\t */\n\tforward: () => void\n\n\t/**\n\t * Navigate to a specific position in the navigation history\n\t *\n\t * @param index The index of the navigation position to navigate to\n\t * @returns void\n\t */\n\tto: (index: number) => void\n\n\t/**\n\t * Push a new path to the history at the current index.\n\t * @internal\n\t * @param path The path to add to the history\n\t * @param pushState Whether or not to call History.pushState.\n\t *        Will be set to false if it's the first load or if it's called from\n\t *        a popstate event.\n\t * @param hash Whether or not we're using hash routing\n\t * @returns void\n\t */\n\tpush: (path: string, pushState: boolean, hash?: boolean) => void\n\n\t/**\n\t * @internal\n\t * The router instance\n\t */\n\trouter?: PineconeRouter\n\n\t/**\n\t * Set the router instance\n\t * @internal\n\t * @param router The router instance to set\n\t */\n\tsetRouter: (router: PineconeRouter) => void\n}\n\nexport const createNavigationHistory = (): NavigationHistory => {\n\treturn {\n\t\tentries: [],\n\t\tindex: 0,\n\t\tcanGoBack: function (): boolean {\n\t\t\treturn this.index > 0\n\t\t},\n\n\t\tback: function (): void {\n\t\t\tthis.to(this.index - 1)\n\t\t},\n\n\t\tcanGoForward: function (): boolean {\n\t\t\treturn this.index < this.entries.length - 1\n\t\t},\n\n\t\tforward: function (): void {\n\t\t\tthis.to(this.index + 1)\n\t\t},\n\n\t\tto: function (index: number): void {\n\t\t\tif (index in this.entries) {\n\t\t\t\tthis.router?.navigate(this.entries[index], false, false, index)\n\t\t\t}\n\t\t},\n\n\t\tpush: function (path: string, pushState: boolean, hash?: boolean): void {\n\t\t\t// only update history if navigating to a different path\n\t\t\tif (this.index < this.entries.length - 1) {\n\t\t\t\t// trim navigation history if we're not at the end\n\t\t\t\tthis.entries = this.entries.slice(0, this.index + 1)\n\t\t\t}\n\t\t\t// add current path and update index\n\t\t\tthis.entries.push(path)\n\t\t\tthis.index = this.entries.length - 1\n\n\t\t\t// handle history state management\n\t\t\tif (pushState) {\n\t\t\t\tconst fullPath = hash ? '#' + path : path\n\t\t\t\thistory.pushState({ path: fullPath }, '', fullPath)\n\t\t\t}\n\t\t},\n\n\t\tsetRouter(router: PineconeRouter): void {\n\t\t\tthis.router = router\n\t\t},\n\t}\n}\n",
    "import type { Handler } from './handler'\n\nexport interface Settings {\n\t/**\n\t * enable hash routing\n\t * @default false: boolean\n\t */\n\thash: boolean\n\n\t/**\n\t * The base path of the site, for example /blog.\n\t * Note: do not use with using hash routing.\n\t * @default `/`\n\t */\n\tbasePath: string\n\n\t/**\n\t * Set an optional ID for where the templates will render by default.\n\t * This can be overriden by the .target modifier.\n\t * @default undefined\n\t */\n\ttargetID?: string\n\n\t/**\n\t * Set to false if you don't want to intercept links by default.\n\t * @default true\n\t */\n\thandleClicks: boolean\n\n\t/**\n\t * Set to true to always send loading events,\n\t * even if the template is inline and there are no handlers.\n\t * @default false\n\t */\n\talwaysLoad: boolean\n\n\t/**\n\t * Handlers that will run on every route.\n\t * @default []\n\t */\n\tglobalHandlers: Handler[]\n}\n\nexport let settings: Settings = {\n\thash: false,\n\tbasePath: '/',\n\tglobalHandlers: [],\n\talwaysLoad: false,\n\thandleClicks: true,\n\ttargetID: undefined,\n}\n\nexport const updateSettings = (newSettings: Partial<Settings>): void => {\n\tsettings = { ...settings, ...newSettings }\n}\n",
    "import { type Context } from './context'\n\nexport type Handler = (\n\tcontext: Context,\n\tresult: typeof HandlerResult\n) => HandlerResult | void | Promise<HandlerResult | void>\n\nexport enum HandlerResult {\n\tHALT,\n\tCONTINUE,\n}\n\nexport const handlerState = {\n\tcancel: false,\n\tdone: false,\n}\n\nexport const abortController = new AbortController()\n\n/**\n * Execute route handlers sequentially, with cancellation support\n * @param {Handler[]} handlers handlers to execute\n * @param {Context} context current context\n * @returns {Promise<HandlerResult>} CONTINUE if all handlers completed,\n *                                   HALT otherwise.\n */\nexport async function handle(\n\thandlers: Handler[],\n\tcontext: Context\n): Promise<HandlerResult> {\n\thandlerState.done = false\n\thandlerState.cancel = false\n\n\tfor (const handler of handlers) {\n\t\tif (handlerState.cancel) {\n\t\t\thandlerState.cancel = false\n\t\t\treturn HandlerResult.HALT\n\t\t}\n\n\t\t// Execute handler (with await if async)\n\t\tconst result =\n\t\t\thandler.constructor.name === 'AsyncFunction'\n\t\t\t\t? await handler(context, HandlerResult)\n\t\t\t\t: handler(context, HandlerResult)\n\n\t\t// Stop execution if handler returned HALT\n\t\tif (result === HandlerResult.HALT) {\n\t\t\treturn result\n\t\t}\n\t}\n\n\tif (!handlerState.cancel) {\n\t\thandlerState.done = true\n\t\treturn HandlerResult.CONTINUE\n\t}\n\n\treturn HandlerResult.HALT\n}\n",
    "import { type Route } from './route'\n\nexport const buildContext = (\n\tpath: string,\n\t{\n\t\troute,\n\t\tparams,\n\t}: {\n\t\troute: Route\n\t\tparams: Context['params']\n\t}\n): Context => ({\n\tpath,\n\troute,\n\tparams,\n})\n\nexport interface Context {\n\treadonly path: string\n\treadonly route: Route\n\treadonly params: Record<string, string | undefined>\n}\n",
    "/**\n * Centralized error messages for Pinecone Router\n */\n\nimport { ElementWithXAttributes } from 'alpinejs'\nimport { RouteTemplate } from './directives/x-route'\n\nexport const INVALID_EXPRESSION_TYPE = (value: unknown) =>\n\t\t`Invalid expression type. Expression: ${value}.`,\n\tTARGET_ID_NOT_FOUND = (id: string) =>\n\t\t`Can't find an element with the supplied target ID: ${id}`,\n\tROUTE_EXISTS = (path: string) => `Route already exists: ${path}`,\n\tMISSING_TEMPLATE_TARGET = 'No target specified for template rendering',\n\tDIRECTIVE_REQUIRES_TEMPLATE =\n\t\t'Directives can only be used on template elements.',\n\tDIRECTIVE_REQUIRES_ROUTE = (directive: string) =>\n\t\t`x-${directive} must be used on the same template as x-route.`,\n\tTARGET_ID_NOT_SPECIFIED =\n\t\t'targetID must be specified for programmatically added templates.',\n\tROUTE_NOT_FOUND = (path: string) => `Path: ${path} was not found.`,\n\tTEMPLATE_PARAM_NOT_FOUND = (param: string, url: string) =>\n\t\t`The param ${param} in the template url ${url} does not exist.` as const\n\n/**\n * Assert that the element is a template element with XAttributes\n * @param value HTMLElement\n */\nexport function assertTemplate(\n\tvalue: ElementWithXAttributes<HTMLElement>\n): asserts value is ElementWithXAttributes<HTMLTemplateElement> {\n\tif (value.tagName.toLowerCase() !== 'template') {\n\t\tthrow new TypeError(DIRECTIVE_REQUIRES_TEMPLATE)\n\t}\n}\n\n/**\n * Assert that the element is a template element with XAttributes and a route attribute\n * @param value {ElementWithXAttributes<HTMLElement>} The element to check\n */\nexport function assertRouteTemplate(\n\tvalue: ElementWithXAttributes<HTMLElement>\n): asserts value is RouteTemplate {\n\tassertTemplate(value)\n\n\tif (value._x_PineconeRouter_route === undefined) {\n\t\tthrow new TypeError(DIRECTIVE_REQUIRES_ROUTE('template'))\n\t}\n}\n\n/**\n * Assert that the element is a template element with XAttributes and a route attribute\n * @param value {unknown} The evaluated expression to check\n */\nexport function assertExpressionIsArray(\n\tvalue: unknown\n): asserts value is unknown[] {\n\tif (typeof value != 'object' || !Array.isArray(value)) {\n\t\tthrow new TypeError(INVALID_EXPRESSION_TYPE(value))\n\t}\n}\n",
    "import { TARGET_ID_NOT_FOUND } from './errors'\n\nexport const modifierValue = (\n\tmodifiers: string[],\n\tkey: string,\n\tfallback?: string\n): string | undefined => {\n\t// If the modifier isn't present, use the default.\n\tif (modifiers.indexOf(key) === -1) return fallback\n\n\t// If it IS present, grab the value after it\n\tconst rawValue = modifiers[modifiers.indexOf(key) + 1]\n\n\tif (!rawValue) return fallback\n\n\tif (key === 'target') {\n\t\tlet match = rawValue.match(/([a-z0-9_-]+)/)\n\t\tif (match) return match[1]\n\t}\n\treturn rawValue\n}\n\nexport const addBasePath = (path: string, basePath: string) => {\n\tif (path == 'notfound') return path\n\tif (basePath != '/' && !path.startsWith(basePath)) {\n\t\tpath = basePath + path\n\t}\n\tif (path == basePath && !path.endsWith('/')) {\n\t\tpath += '/'\n\t}\n\treturn path\n}\n\nexport const getTargetELement = (\n\ttargetId?: string,\n\tglobalTargetId?: string\n): HTMLElement | undefined => {\n\tlet target = targetId ?? globalTargetId ?? ''\n\tlet targetEl = document.getElementById(target)\n\n\tif (target.length && !targetEl)\n\t\tthrow new ReferenceError(TARGET_ID_NOT_FOUND(target))\n\n\treturn targetEl ?? undefined\n}\n",
    "import { type ElementWithXAttributes, type Alpine } from 'alpinejs'\n\nimport { loadingState } from './router'\nimport { settings } from './settings'\nimport { type Context } from './context'\nimport { addBasePath } from './utils'\n\nconst cache = new Map<string, string>()\nconst loading = new Map<string, Promise<string>>()\nconst inMakeProgress = new Set()\n\nexport const fetchError = (error: string, url: string) => {\n\tdocument.dispatchEvent(\n\t\tnew CustomEvent('pinecone:fetch-error', { detail: { error, url } })\n\t)\n}\n\nexport const make = (\n\tAlpine: Alpine,\n\ttemplate: ElementWithXAttributes<HTMLTemplateElement>,\n\texpression: string, // the expression on the x-template directive\n\ttargetEl?: HTMLElement,\n\turls?: string[]\n) => {\n\t// having a unique id ensures the same template can be used multiple times inside the same page\n\t// this is for when routes share a template\n\t// with this, adding an id to the template element will make it unique\n\tconst unique_id = template.id + expression\n\n\tif (inMakeProgress.has(unique_id)) return\n\tinMakeProgress.add(unique_id)\n\n\tconst contentNode = template.content\n\n\tconst clones: HTMLElement[] = Array(contentNode.childElementCount)\n\n\t// Clone scripts to make them run\n\tcontentNode.querySelectorAll('script').forEach((oldScript) => {\n\t\tconst newScript = document.createElement('script')\n\t\tArray.from(oldScript.attributes).forEach((attr) =>\n\t\t\tnewScript.setAttribute(attr.name, attr.value)\n\t\t)\n\t\tnewScript.textContent = oldScript.textContent\n\t\toldScript.parentNode?.replaceChild(newScript, oldScript)\n\t})\n\n\t// Clone all children and add the x-data scope\n\tArray.from(contentNode.children).forEach((child, index) => {\n\t\tconst clone = child.cloneNode(true) as ElementWithXAttributes<HTMLElement>\n\t\tclones[index] = clone\n\t\tAlpine.addScopeToNode(clone, {}, template)\n\t\t// TODO: add if proved useful\n\t\t// template.id && clone.setAttribute('template-id', template.id)\n\t})\n\n\tAlpine.mutateDom(() => {\n\t\tif (targetEl) {\n\t\t\ttargetEl.replaceChildren(...clones)\n\t\t} else template.after(...clones)\n\t\tclones.forEach((clone) => {\n\t\t\tAlpine.initTree(clone)\n\t\t})\n\t})\n\n\ttemplate._x_PineconeRouter_template = clones\n\t// keep track of the currently rendered template urls\n\ttemplate._x_PineconeRouter_templateUrls = urls\n\n\ttemplate._x_PineconeRouter_undoTemplate = () => {\n\t\t// Remove clone element\n\t\tAlpine.mutateDom(() => {\n\t\t\tclones.forEach((clone: ElementWithXAttributes<HTMLElement>) => {\n\t\t\t\tAlpine.destroyTree(clone)\n\t\t\t\tclone.remove()\n\t\t\t})\n\t\t})\n\n\t\tdelete template._x_PineconeRouter_template\n\t\tdelete template._x_PineconeRouter_templateUrls\n\t}\n\n\tAlpine.nextTick(() => inMakeProgress.delete(unique_id))\n}\n\n// Hide content of a template element\nexport const hide = (template: ElementWithXAttributes<HTMLTemplateElement>) => {\n\tif (template._x_PineconeRouter_undoTemplate) {\n\t\ttemplate._x_PineconeRouter_undoTemplate()\n\t\tdelete template._x_PineconeRouter_undoTemplate\n\t}\n}\n\nexport const show = (\n\tAlpine: Alpine,\n\ttemplate: ElementWithXAttributes<HTMLTemplateElement>,\n\texpression: string,\n\turls?: Array<string>,\n\ttargetEl?: HTMLElement\n): void => {\n\t// if the template is rendered but the template url parameters have changed\n\t// hide the content and remove the content inside the template\n\tif (\n\t\ttemplate._x_PineconeRouter_templateUrls != undefined &&\n\t\ttemplate._x_PineconeRouter_templateUrls != urls\n\t) {\n\t\thide(template)\n\t\ttemplate.innerHTML = ''\n\t}\n\n\t// the template is already inserted into the page\n\t// leave it as is and end loading\n\tif (template._x_PineconeRouter_template) {\n\t\tloadingState.endLoading()\n\t\treturn\n\t}\n\n\tif (template.content.childElementCount) {\n\t\tmake(Alpine, template, expression, targetEl, urls)\n\t\tloadingState.endLoading()\n\t\treturn\n\t}\n\n\tif (urls) {\n\t\t// if templates are not loaded, load them\n\t\tload(urls, template)\n\t\t\t.then(() => make(Alpine, template, expression, targetEl, urls))\n\t\t\t.finally(() => loadingState.endLoading())\n\t}\n}\n\nexport const interpolate = (\n\turls: string[],\n\tparams: Context['params']\n): string[] => {\n\treturn urls.map((url) => {\n\t\t// Replace :param format (e.g., /users/:id/profile.html)\n\t\treturn url.replace(/:([^/.]+)/g, (_, name) => {\n\t\t\treturn params[name] || name\n\t\t})\n\t})\n}\n\n// Load a template from a url and put its content into cachedTemplates\nconst loadUrl = async (url: string): Promise<string> => {\n\turl = addBasePath(url, settings.basePath)\n\t// Return from cache if available\n\tif (cache.has(url)) return cache.get(url)!\n\n\t// Return existing promise if already loading\n\tif (loading.has(url)) return loading.get(url)!\n\n\tconst fetchPromise = fetch(url)\n\t\t.then((r) => {\n\t\t\tif (!r.ok) {\n\t\t\t\tfetchError(r.statusText, url)\n\t\t\t\treturn ''\n\t\t\t}\n\t\t\treturn r.text()\n\t\t})\n\t\t.then((html) => {\n\t\t\tif (html) cache.set(url, html)\n\t\t\tloading.delete(url)\n\t\t\treturn html || ''\n\t\t})\n\n\tloading.set(url, fetchPromise)\n\treturn fetchPromise\n}\n\n// Preload templates from urls\nexport const preload = (urls: string[]): void => {\n\turls.forEach(loadUrl)\n}\n\n/**\n * Load templates from urls into an element\n * @param urls array of urls to load\n * @param el target element where to put the content of the urls\n * @returns Promise<string> the new innerHTML of the target element\n */\nexport const load = (\n\turls: string[],\n\tel: HTMLTemplateElement | HTMLElement\n): Promise<void> =>\n\tPromise.all(urls.map(loadUrl)).then((htmlArray) => {\n\t\tel.innerHTML = htmlArray.join('')\n\t})\n",
    "import createRoute, { match, type Route, type RouteOptions } from './route'\nimport { createNavigationHistory, type NavigationHistory } from './history'\nimport { settings, updateSettings, type Settings } from './settings'\nimport { handle, HandlerResult, handlerState } from './handler'\nimport { buildContext, type Context } from './context'\nimport { load, preload } from './templates'\nimport { addBasePath } from './utils'\nimport {\n\tTARGET_ID_NOT_SPECIFIED,\n\tROUTE_NOT_FOUND,\n\tROUTE_EXISTS,\n} from './errors'\n\n// Create a custom type that guarantees the notfound route exists\nexport type RoutesMap = Map<string, Route> & {\n\tget(key: 'notfound'): Route\n}\n\nexport interface PineconeRouter {\n\treadonly name: string\n\treadonly version: string\n\n\troutes: RoutesMap\n\tcontext: Context\n\tsettings: Settings\n\thistory: NavigationHistory\n\n\tisLoading: () => boolean\n\n\t/**\n\t * Add a new route\n\t *\n\t * @param {string} path the path to match\n\t * @param {RouteOptions} options the options for the route\n\t */\n\tadd: (path: string, options: RouteOptions) => void\n\n\t/**\n\t * Remove a route\n\t *\n\t * @param {string} path the route to remove\n\t */\n\tremove: (path: string) => void\n\n\t/**\n\t *  Navigate to the specified path\n\t *\n\t * @param {string} path the path with no hash even if using hash routing\n\t * @param {boolean} fromPopState INTERNAL Is set to true when called from\n\t *                               onpopstate event\n\t * @param {boolean} firstLoad INTERNAL Is set to true on browser page load.\n\t * @param {number} index INTERNAL the index of the navigation history to go to\n\t * @returns {Promise<void>}\n\t */\n\tnavigate: (\n\t\tpath: string,\n\t\tfromPopState?: boolean,\n\t\tfirstLoad?: boolean,\n\t\tindex?: number\n\t) => Promise<void>\n}\n\nexport const loadingState = {\n\tloading: false,\n\tloadStart: new Event('pinecone:start'),\n\tloadEnd: new Event('pinecone:end'),\n\n\tstartLoading: function (): void {\n\t\tif (!this.loading) {\n\t\t\tdocument.dispatchEvent(this.loadStart)\n\t\t\tthis.loading = true\n\t\t}\n\t},\n\tendLoading: function (): void {\n\t\tif (this.loading) {\n\t\t\tdocument.dispatchEvent(this.loadEnd)\n\t\t\tthis.loading = false\n\t\t}\n\t},\n}\n\nexport const createPineconeRouter = (\n\tname: string,\n\tversion: string\n): PineconeRouter => {\n\tconst notfound = createRoute('notfound', {\n\t\thandlers: [\n\t\t\t(ctx) => console.error(new ReferenceError(ROUTE_NOT_FOUND(ctx.path))),\n\t\t],\n\t})\n\n\tconst routes = new Map([['notfound', notfound]]) as RoutesMap\n\n\tconst context = buildContext('', {\n\t\troute: notfound,\n\t\tparams: {},\n\t})\n\n\tconst router: PineconeRouter = {\n\t\tname,\n\t\tversion,\n\t\thistory: createNavigationHistory(),\n\t\troutes,\n\t\tcontext,\n\t\tisLoading: () => loadingState.loading,\n\n\t\tget settings(): Settings {\n\t\t\treturn settings\n\t\t},\n\n\t\tset settings(value: Partial<Settings>) {\n\t\t\tupdateSettings(value)\n\t\t},\n\n\t\tadd: function (path: string, options: RouteOptions) {\n\t\t\t// check if the route was registered already\n\t\t\t// but allow updating the notfound route\n\t\t\tif (path != 'notfound' && this.routes.has(path)) {\n\t\t\t\tthrow new Error(ROUTE_EXISTS(path))\n\t\t\t}\n\n\t\t\tif (options.templates && options.preload) {\n\t\t\t\tpreload(options.templates)\n\t\t\t}\n\t\t\tthis.routes.set(path, createRoute(path, options))\n\t\t},\n\n\t\tremove: function (path: string): void {\n\t\t\tthis.routes.delete(path)\n\t\t},\n\n\t\tnavigate: async function (\n\t\t\tpath: string,\n\t\t\tfromPopState?: boolean,\n\t\t\tfirstLoad?: boolean,\n\t\t\tindex?: number\n\t\t) {\n\t\t\t// if a navigation request was made before previous route handlers were\n\t\t\t// done, cancel them\n\t\t\tif (!handlerState.done) handlerState.cancel = true\n\n\t\t\t// if specified add the basePath\n\t\t\t// TODO: Test basepath\n\t\t\tpath = addBasePath(path || '/', settings.basePath)\n\n\t\t\t// special case: first load with hash routing and root path\n\t\t\tif (firstLoad && settings.hash && path === '/') {\n\t\t\t\treturn this.navigate('/', false, false)\n\t\t\t}\n\n\t\t\tlet route = this.routes.get('notfound')\n\t\t\tlet params = {}\n\n\t\t\tthis.routes.forEach((r: Route) => {\n\t\t\t\tconst res = match(addBasePath(r.path, settings.basePath), path)\n\t\t\t\tif (res) {\n\t\t\t\t\tparams = res\n\t\t\t\t\troute = r\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t// create a new local context object.\n\t\t\t// this is to prevent editing the global context, which triggers\n\t\t\t// Alpine effects and causes them to run before this function has\n\t\t\t// done its work.\n\t\t\tconst context = buildContext(path, {\n\t\t\t\t...this.context,\n\t\t\t\troute,\n\t\t\t\tparams,\n\t\t\t})\n\n\t\t\tconst handlers = settings.globalHandlers.concat(context.route.handlers)\n\n\t\t\t// if alwaysSendLoadingEvents is true, or there are handlers or templates\n\t\t\t// to render and the path changed\n\t\t\t// (ie. not soft reload), then dispatch the loading start event\n\t\t\tif (\n\t\t\t\tsettings.alwaysLoad ||\n\t\t\t\t((handlers.length || context.route.templates.length) &&\n\t\t\t\t\tthis.context.path != path)\n\t\t\t) {\n\t\t\t\tloadingState.startLoading()\n\t\t\t}\n\n\t\t\tif (handlers.length) {\n\t\t\t\tconst ok = await handle(handlers, context)\n\n\t\t\t\t// if a handler halted execution,\n\t\t\t\t// return without displaying a template\n\t\t\t\tif (ok == HandlerResult.HALT) {\n\t\t\t\t\tloadingState.endLoading()\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif (!context.route.templates) {\n\t\t\t\t\tloadingState.endLoading()\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\thandlerState.done = true\n\t\t\t}\n\n\t\t\t// if called from navigateTo(), do not add the path to the stack\n\t\t\tif (index != null) {\n\t\t\t\tthis.history.index = index\n\t\t\t} else if (path != this.context.path) {\n\t\t\t\t// if path has changed push it to the stack\n\t\t\t\tthis.history.push(path, !fromPopState && !firstLoad, settings.hash)\n\t\t\t}\n\n\t\t\t// update the global context, trigger Alpine effect, and render templates.\n\t\t\tthis.context = context\n\n\t\t\t// show templates added programmatically\n\t\t\tif (context.route.programmaticTemplates) {\n\t\t\t\tlet target = document.getElementById(\n\t\t\t\t\tcontext.route.targetID ?? settings.targetID ?? ''\n\t\t\t\t)\n\n\t\t\t\tif (!target) throw new Error(TARGET_ID_NOT_SPECIFIED)\n\n\t\t\t\tload(context.route.templates, target).finally(() =>\n\t\t\t\t\tloadingState.endLoading()\n\t\t\t\t)\n\t\t\t}\n\n\t\t\tif (settings.alwaysLoad) loadingState.endLoading()\n\t\t},\n\t}\n\n\trouter.history.setRouter(router)\n\n\treturn router\n}\n",
    "import { type Alpine } from 'alpinejs'\n\nimport { hide, interpolate, load, show } from '../templates'\nimport { getTargetELement, modifierValue } from '../utils'\nimport { PineconeRouter } from '../router'\nimport { assertExpressionIsArray, assertRouteTemplate } from '../errors'\n\nconst TemplateDirective = (Alpine: Alpine, Router: PineconeRouter) => {\n\tAlpine.directive(\n\t\t'template',\n\t\t(el, { expression, modifiers }, { evaluate, cleanup, Alpine, effect }) => {\n\t\t\tassertRouteTemplate(el)\n\n\t\t\tconst targetEl = getTargetELement(\n\t\t\t\tmodifierValue(modifiers, 'target'),\n\t\t\t\tRouter.settings.targetID\n\t\t\t)\n\n\t\t\t// add template to the route\n\t\t\tconst path = el._x_PineconeRouter_route\n\n\t\t\tlet urls: string[]\n\n\t\t\t// only process the expression if it is not empty\n\t\t\t// this allows inline templates to be used without an expression\n\t\t\tif (expression != '') {\n\t\t\t\texpression = expression.trim()\n\t\t\t\tif (\n\t\t\t\t\t!(expression.startsWith('[') && expression.endsWith(']')) &&\n\t\t\t\t\t!(expression.startsWith('Array') && expression.endsWith(')'))\n\t\t\t\t) {\n\t\t\t\t\texpression = `['${expression}']`\n\t\t\t\t}\n\n\t\t\t\tconst evaluatedExpression = evaluate(expression)\n\n\t\t\t\tassertExpressionIsArray(evaluatedExpression)\n\n\t\t\t\turls = evaluatedExpression as string[]\n\n\t\t\t\tif (modifiers.includes('preload')) {\n\t\t\t\t\tload(urls, el)\n\t\t\t\t}\n\n\t\t\t\tconst route = Router.routes.get(path)!\n\t\t\t\troute.templates = urls\n\t\t\t}\n\n\t\t\tconst callback = (urls?: string[]) => {\n\t\t\t\tconst found = Router.context.route.path == path\n\t\t\t\tif (found) {\n\t\t\t\t\tif (urls && modifiers.includes('interpolate')) {\n\t\t\t\t\t\turls = interpolate(urls, Router.context.params)\n\t\t\t\t\t}\n\t\t\t\t\tshow(Alpine, el, expression, urls, targetEl)\n\t\t\t\t} else hide(el)\n\t\t\t}\n\n\t\t\tAlpine.nextTick(() => effect(() => callback(urls)))\n\n\t\t\tcleanup(() => {\n\t\t\t\tel._x_PineconeRouter_undoTemplate && el._x_PineconeRouter_undoTemplate()\n\t\t\t})\n\t\t}\n\t)\n}\n\nexport default TemplateDirective\n",
    "import { type Alpine } from 'alpinejs'\nimport { PineconeRouter } from '../router'\nimport { assertExpressionIsArray, assertRouteTemplate } from '../errors'\n\nimport { type Route } from '../route'\nimport type { Handler } from '../handler'\n\nconst HandlerDirective = (Alpine: Alpine, Router: PineconeRouter) => {\n\tAlpine.directive(\n\t\t'handler',\n\t\t(el, { expression, modifiers }, { evaluate, cleanup }) => {\n\t\t\t// check if the handlers expression is an array\n\t\t\t// if not make it one\n\t\t\texpression = expression.trim()\n\t\t\tif (\n\t\t\t\t!(expression.startsWith('[') && expression.endsWith(']')) &&\n\t\t\t\t!(expression.startsWith('Array') && expression.endsWith(')'))\n\t\t\t) {\n\t\t\t\texpression = `[${expression}]`\n\t\t\t}\n\n\t\t\tconst evaluatedExpression = evaluate(expression)\n\n\t\t\tassertExpressionIsArray(evaluatedExpression)\n\n\t\t\tlet handlers = evaluatedExpression as Handler[]\n\n\t\t\t// add `this` context for handlers inside an Alpine.component\n\t\t\tfor (let i = 0; i < handlers.length; i++) {\n\t\t\t\thandlers[i] = handlers[i].bind(Alpine.$data(el))\n\t\t\t}\n\n\t\t\tlet route: Route\n\n\t\t\tif (modifiers.includes('global')) {\n\t\t\t\tRouter.settings.globalHandlers = handlers\n\t\t\t} else {\n\t\t\t\tassertRouteTemplate(el)\n\n\t\t\t\t// add handlers to the route\n\t\t\t\tlet path = el._x_PineconeRouter_route\n\t\t\t\troute = Router.routes.get(path)!\n\t\t\t\troute.handlers = handlers\n\t\t\t}\n\n\t\t\tcleanup(() => {\n\t\t\t\tif (modifiers.includes('global')) {\n\t\t\t\t\tRouter.settings.globalHandlers = []\n\t\t\t\t} else {\n\t\t\t\t\troute.handlers = []\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t).before('template')\n}\n\nexport default HandlerDirective\n",
    "import { type ElementWithXAttributes, type Alpine } from 'alpinejs'\n\nimport { PineconeRouter } from '../router'\nimport { assertTemplate } from '../errors'\n\nexport interface RouteTemplate\n\textends ElementWithXAttributes<HTMLTemplateElement> {\n\t_x_PineconeRouter_route: string\n}\n\nconst RouteDirective = (Alpine: Alpine, Router: PineconeRouter) => {\n\tAlpine.directive('route', (el, { expression }, { cleanup }) => {\n\t\tlet path = expression\n\n\t\tassertTemplate(el)\n\n\t\tif (path != 'notfound') {\n\t\t\t// register the new route if possible\n\t\t\tRouter.add(path, {})\n\t\t}\n\n\t\t// set the path in the element so it is used by other directives\n\t\tel._x_PineconeRouter_route = path\n\n\t\tcleanup(() => {\n\t\t\tRouter.routes.delete(path)\n\t\t\tdelete el._x_PineconeRouter_route\n\t\t})\n\t}).before('handler')\n}\n\nexport default RouteDirective\n",
    "import { type PineconeRouter } from './router'\n\n/**\n * @description Add a handler to click events on valid links\n */\nexport const handleClicks = (Router: PineconeRouter) => {\n\twindow.document.body.addEventListener('click', (e: MouseEvent) => {\n\t\t// Ignore modified clicks or non-primary buttons\n\t\tif (\n\t\t\te.ctrlKey ||\n\t\t\te.metaKey ||\n\t\t\te.altKey ||\n\t\t\te.shiftKey ||\n\t\t\te.button ||\n\t\t\te.defaultPrevented\n\t\t) {\n\t\t\treturn\n\t\t}\n\n\t\t// Find closest anchor element\n\t\tconst node = (e.target as HTMLElement).closest('a')\n\t\tif (!node) return\n\n\t\t// Skip if link shouldn't be intercepted\n\t\tif (\n\t\t\t(Router.settings.handleClicks === false &&\n\t\t\t\t!node.hasAttribute('x-link')) ||\n\t\t\tnode.hasAttribute('data-native') ||\n\t\t\tnode.hasAttribute('native')\n\t\t) {\n\t\t\treturn\n\t\t}\n\n\t\tconst href = node.getAttribute('href')\n\t\tconst target = node.getAttribute('target')\n\n\t\t// Only handle internal links without special targets\n\t\tif (\n\t\t\thref &&\n\t\t\thref.startsWith(Router.settings.basePath) &&\n\t\t\t(!target || /^_?self$/i.test(target))\n\t\t) {\n\t\t\tRouter.navigate(href)\n\t\t\te.preventDefault()\n\t\t}\n\t})\n}\n",
    "import { type PluginCallback, type Alpine } from 'alpinejs'\n\nimport { createPineconeRouter, type PineconeRouter } from './router'\nimport TemplateDirective from './directives/x-template'\nimport HandlerDirective from './directives/x-handler'\nimport RouteDirective from './directives/x-route'\nimport { type NavigationHistory } from './history'\nimport { type Context } from './context'\nimport { handleClicks } from './links'\n\nimport { name, version } from '../package.json'\n\ndeclare global {\n\tinterface Window {\n\t\tPineconeRouter: PineconeRouter\n\t\tAlpine: Alpine\n\t}\n}\n\n// This extends the alpinejs types\n// Adding our custom magics and html attributes\n// This allows the user to extend AlpineComponent with $router and $params already set\ndeclare module 'alpinejs' {\n\tinterface XAttributes {\n\t\t_x_PineconeRouter_templateUrls: string[]\n\t\t_x_PineconeRouter_template: HTMLElement[]\n\t\t_x_PineconeRouter_scripts: HTMLScriptElement[]\n\t\t_x_PineconeRouter_undoTemplate: () => void\n\t\t_x_PineconeRouter_route: string\n\t}\n\tinterface Alpine {\n\t\t$router: PineconeRouter\n\t\t$history: NavigationHistory\n\t\t$params: Context['params']\n\t}\n\tinterface Magics<T> {\n\t\t$router: PineconeRouter\n\t\t$stack: NavigationHistory\n\t\t$params: Context['params']\n\t}\n}\n\nconst PineconeRouterPlugin: PluginCallback = function (Alpine: Alpine) {\n\tconst Router = Alpine.reactive(createPineconeRouter(name, version))\n\n\twindow.PineconeRouter = Router\n\n\t// Initialize event listeners (equivalent to constructor)\n\tdocument.addEventListener('alpine:initialized', () => {\n\t\t// virtually navigate to the path on the first page load\n\t\t// this will register the path in history and sets the path variable\n\t\tif (Router.settings.hash == false) {\n\t\t\tRouter.navigate(location.pathname + location.search, false, true)\n\t\t} else {\n\t\t\tRouter.navigate(location.hash.substring(1), false, true)\n\t\t}\n\t})\n\n\t// handle navigation events not emitted by links, for example, back button.\n\twindow.addEventListener('popstate', () => {\n\t\tif (Router.settings.hash) {\n\t\t\tif (window.location.hash != '') {\n\t\t\t\tRouter.navigate(window.location.hash.substring(1), true)\n\t\t\t}\n\t\t} else {\n\t\t\tRouter.navigate(window.location.pathname, true)\n\t\t}\n\t})\n\n\t// intercept click event in links\n\thandleClicks(Router)\n\n\t// order matters in order to use directive.before()\n\t// this makes sure the order is as follows:\n\t// x-route -> x-handler -> x-template\n\tTemplateDirective(Alpine, Router)\n\tHandlerDirective(Alpine, Router)\n\tRouteDirective(Alpine, Router)\n\n\tAlpine.$router = Router\n\tAlpine.$history = Router.history\n\tAlpine.$params = Router.context.params\n\n\tAlpine.magic('router', () => Router)\n\tAlpine.magic('history', () => Router.history)\n\tAlpine.magic('params', () => Router.context.params)\n}\n\nexport default PineconeRouterPlugin\n"
  ],
  "mappings": "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",
  "debugId": "46E5545C29D28FE964756E2164756E21",
  "names": []
}